import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
import shutil
from pathlib import Path
import threading

class FileExtensionChanger:
    def __init__(self, root):
        self.root = root
        self.root.title("–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.selected_files = []
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            self.root, 
            text="üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤", 
            font=("Arial", 16, "bold"),
            bg='#f0f0f0',
            fg='#2c3e50'
        )
        title_label.pack(pady=20)
        
        # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        file_frame = tk.Frame(self.root, bg='#f0f0f0')
        file_frame.pack(pady=10, padx=20, fill='x')
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        select_btn = tk.Button(
            file_frame,
            text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã",
            command=self.select_files,
            font=("Arial", 12),
            bg='#3498db',
            fg='white',
            relief='flat',
            padx=20,
            pady=10,
            cursor='hand2'
        )
        select_btn.pack(side='left', padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
        clear_btn = tk.Button(
            file_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            command=self.clear_files,
            font=("Arial", 12),
            bg='#e74c3c',
            fg='white',
            relief='flat',
            padx=20,
            pady=10,
            cursor='hand2'
        )
        clear_btn.pack(side='left', padx=10)
        
        # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        list_frame = tk.Frame(self.root, bg='#f0f0f0')
        list_frame.pack(pady=10, padx=20, fill='both', expand=True)
        
        tk.Label(
            list_frame, 
            text="–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", 
            font=("Arial", 12, "bold"),
            bg='#f0f0f0',
            fg='#2c3e50'
        ).pack(anchor='w')
        
        # Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        self.file_tree = ttk.Treeview(
            list_frame, 
            columns=('name', 'extension', 'size'), 
            show='headings',
            height=10
        )
        
        self.file_tree.heading('name', text='–ò–º—è —Ñ–∞–π–ª–∞')
        self.file_tree.heading('extension', text='–¢–µ–∫—É—â–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ')
        self.file_tree.heading('size', text='–†–∞–∑–º–µ—Ä')
        
        self.file_tree.column('name', width=400)
        self.file_tree.column('extension', width=150)
        self.file_tree.column('size', width=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        scrollbar = ttk.Scrollbar(list_frame, orient='vertical', command=self.file_tree.yview)
        self.file_tree.configure(yscrollcommand=scrollbar.set)
        
        self.file_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        settings_frame = tk.Frame(self.root, bg='#f0f0f0')
        settings_frame.pack(pady=20, padx=20, fill='x')
        
        # –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        tk.Label(
            settings_frame, 
            text="–ù–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ:", 
            font=("Arial", 12, "bold"),
            bg='#f0f0f0',
            fg='#2c3e50'
        ).pack(anchor='w')
        
        extension_frame = tk.Frame(settings_frame, bg='#f0f0f0')
        extension_frame.pack(fill='x', pady=5)
        
        self.extension_var = tk.StringVar(value='png')
        extension_entry = tk.Entry(
            extension_frame,
            textvariable=self.extension_var,
            font=("Arial", 12),
            width=10
        )
        extension_entry.pack(side='left', padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        quick_extensions = ['png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp', 'tiff']
        for ext in quick_extensions:
            btn = tk.Button(
                extension_frame,
                text=ext.upper(),
                command=lambda e=ext: self.extension_var.set(e),
                font=("Arial", 10),
                bg='#95a5a6',
                fg='white',
                relief='flat',
                padx=10,
                pady=5,
                cursor='hand2'
            )
            btn.pack(side='left', padx=2)
        
        # –û–ø—Ü–∏–∏
        options_frame = tk.Frame(settings_frame, bg='#f0f0f0')
        options_frame.pack(fill='x', pady=10)
        
        self.backup_var = tk.BooleanVar(value=True)
        backup_check = tk.Checkbutton(
            options_frame,
            text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
            variable=self.backup_var,
            font=("Arial", 10),
            bg='#f0f0f0',
            fg='#2c3e50'
        )
        backup_check.pack(anchor='w')
        
        self.overwrite_var = tk.BooleanVar(value=False)
        overwrite_check = tk.Checkbutton(
            options_frame,
            text="–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã",
            variable=self.overwrite_var,
            font=("Arial", 10),
            bg='#f0f0f0',
            fg='#2c3e50'
        )
        overwrite_check.pack(anchor='w')
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        convert_btn = tk.Button(
            self.root,
            text="üöÄ –ò–ó–ú–ï–ù–ò–¢–¨ –†–ê–°–®–ò–†–ï–ù–ò–Ø",
            command=self.convert_files,
            font=("Arial", 14, "bold"),
            bg='#27ae60',
            fg='white',
            relief='flat',
            padx=30,
            pady=15,
            cursor='hand2'
        )
        convert_btn.pack(pady=20)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(
            self.root, 
            mode='determinate',
            length=400
        )
        self.progress.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(
            self.root,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=("Arial", 10),
            bg='#f0f0f0',
            fg='#7f8c8d'
        )
        self.status_label.pack(pady=5)
    
    def select_files(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        files = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π",
            filetypes=[
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.gif *.bmp *.webp *.tiff"),
                ("–í–∏–¥–µ–æ", "*.mp4 *.avi *.mov *.webm *.mkv"),
                ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf *.doc *.docx *.txt"),
            ]
        )
        
        if files:
            self.selected_files.extend(files)
            self.update_file_list()
            self.status_label.config(text=f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.selected_files)}")
    
    def clear_files(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.selected_files.clear()
        self.update_file_list()
        self.status_label.config(text="–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")
    
    def update_file_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        for item in self.file_tree.get_children():
            self.file_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
        for file_path in self.selected_files:
            try:
                path = Path(file_path)
                name = path.name
                extension = path.suffix.lower() if path.suffix else "–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"
                size = self.get_file_size(path)
                
                self.file_tree.insert('', 'end', values=(name, extension, size))
            except Exception as e:
                self.file_tree.insert('', 'end', values=(file_path, "–æ—à–∏–±–∫–∞", "N/A"))
    
    def get_file_size(self, path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            size = path.stat().st_size
            if size < 1024:
                return f"{size} B"
            elif size < 1024 * 1024:
                return f"{size / 1024:.1f} KB"
            else:
                return f"{size / (1024 * 1024):.1f} MB"
        except:
            return "N/A"
    
    def convert_files(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
        if not self.selected_files:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã!")
            return
        
        new_extension = self.extension_var.get().strip()
        if not new_extension:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ!")
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not new_extension.startswith('.'):
            new_extension = '.' + new_extension
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._convert_files_thread, args=(new_extension,))
        thread.daemon = True
        thread.start()
    
    def _convert_files_thread(self, new_extension):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
        try:
            total_files = len(self.selected_files)
            self.progress['maximum'] = total_files
            self.progress['value'] = 0
            
            converted_count = 0
            error_count = 0
            
            for i, file_path in enumerate(self.selected_files):
                try:
                    self.root.after(0, lambda: self.status_label.config(
                        text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i+1} –∏–∑ {total_files}..."
                    ))
                    
                    path = Path(file_path)
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if self.backup_var.get():
                        backup_path = path.with_suffix(path.suffix + '.backup')
                        shutil.copy2(file_path, backup_path)
                    
                    # –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    new_path = path.with_suffix(new_extension)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if new_path.exists() and not self.overwrite_var.get():
                        error_count += 1
                        continue
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    path.rename(new_path)
                    converted_count += 1
                    
                except Exception as e:
                    error_count += 1
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
                self.root.after(0, lambda v=i+1: self.progress.config(value=v))
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.root.after(0, lambda: self._conversion_complete(converted_count, error_count))
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"))
    
    def _conversion_complete(self, converted_count, error_count):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        self.progress['value'] = 0
        self.status_label.config(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        message = f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        message += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {converted_count} —Ñ–∞–π–ª–æ–≤\n"
        if error_count > 0:
            message += f"‚ùå –û—à–∏–±–æ–∫: {error_count} —Ñ–∞–π–ª–æ–≤"
        
        messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", message)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        if converted_count > 0:
            self.clear_files()

def main():
    root = tk.Tk()
    app = FileExtensionChanger(root)
    root.mainloop()

if __name__ == "__main__":
    main()